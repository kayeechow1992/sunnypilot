<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget parent="main_window" name="Main Window">
  <Tab tab_name="actuator data" containers="1">
   <Container>
    <DockSplitter sizes="0.25;0.25;0.25;0.25" count="4" orientation="-">
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-1.050000" top="1.050000" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#17becf" name="/carControl/actuators/torque"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-385.132391" top="536.899115" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#1f77b4" name="/carControl/actuators/steeringAngleDeg"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-0.364800" top="14.956815" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#ff7f0e" name="/carState/vEgoRaw"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-0.208517" top="0.149191" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#f14cc1" name="/carControl/actuators/curvature"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="steering messages (CAN)" containers="1">
   <Container>
    <DockSplitter sizes="0.200218;0.200218;0.199129;0.200218;0.200218" count="5" orientation="-">
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-189.000000" top="189.000000" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#1ac938" name="/can/2/LKAS_ALT/LKAS_ANGLE_CMD"/>
       <curve color="#9467bd" name="/can/128/LKAS_ALT/LKAS_ANGLE_CMD"/>
       <curve color="#ff0e1c" name="/can/192/LKAS_ALT/LKAS_ANGLE_CMD"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-6.200000" top="254.200000" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#f14cc1" name="/can/128/LKAS_ALT/LKAS_ANGLE_MAX_TORQUE"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-0.025000" top="1.025000" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#d62728" name="/carState/steeringPressed"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="460.325000" top="1874.675000" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#1f77b4" name="/pandaStates/0/safetyTxBlocked"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-0.025000" top="1.025000" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#f14cc1" name="/can/1/CCNC_0x161/DAW_ICON"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab tab_name="Understanding Torque" containers="1">
   <Container>
    <DockSplitter sizes="0.5;0.5" count="2" orientation="-">
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-6.175000" top="253.175000" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#1f77b4" name="/can/1/LFA_ALT/LKAS_ANGLE_MAX_TORQUE"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot flip_x="false" flip_y="false" style="Lines" mode="TimeSeries">
       <range bottom="-41.182501" top="42.082498" right="590.696728" left="429.901019"/>
       <limitY/>
       <curve color="#1ac938" name="/carState/steeringTorqueEps"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="1"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <default time_axis="" delimiter="0"/>
  </plugin>
  <plugin ID="DataLoad MCAP"/>
  <plugin ID="DataLoad Rlog"/>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="Cereal Subscriber"/>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="ZMQ Subscriber"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a series from arrays&#xa;&#xa; new_series: a series previously created with ScatterXY.new(name)&#xa; prefix:     prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value. If [nil], use the index of the array.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   new_series = ScatterXY.new(&quot;my_trajectory&quot;) &#xa;   CreateSeriesFromArray( new_series, &quot;/trajectory/node&quot;, &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;--]]&#xa;&#xa;function CreateSeriesFromArray( new_series, prefix, suffix_X, suffix_Y, timestamp )&#xa;  &#xa;  --- clear previous values&#xa;  new_series:clear()&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_y == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;&#xa;--[[ Similar to the built-in function GetSeriesNames(), but select only the names with a give prefix. --]]&#xa;&#xa;function GetSeriesNamesByPrefix(prefix)&#xa;  -- GetSeriesNames(9 is a built-in function&#xa;  all_names = GetSeriesNames()&#xa;  filtered_names = {}&#xa;  for i, name in ipairs(all_names)  do&#xa;    -- check the prefix&#xa;    if name:find(prefix, 1, #prefix) then&#xa;      table.insert(filtered_names, name);&#xa;    end&#xa;  end&#xa;  return filtered_names&#xa;end&#xa;&#xa;--[[ Modify an existing series, applying offsets to all their X and Y values&#xa;&#xa; series: an existing timeseries, obtained with TimeseriesView.find(name)&#xa; delta_x: offset to apply to each x value&#xa; delta_y: offset to apply to each y value &#xa;  &#xa;--]]&#xa;&#xa;function ApplyOffsetInPlace(series, delta_x, delta_y)&#xa;  -- use C++ indeces, not Lua indeces&#xa;  for index=0, series:size()-1 do&#xa;    x,y = series:at(index)&#xa;    series:set(index, x + delta_x, y + delta_y)&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations/>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>

